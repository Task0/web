Routing
Routing in Flight is done by matching a URL pattern with a callback function.

Flight::route('/', function(){
    echo 'hello world!';
});
The callback can be any object that is callable. So you can use a regular function:

function hello(){
    echo 'hello world!';
}

Flight::route('/', 'hello');
Or a class method:

class Greeting {
    public static function hello() {
        echo 'hello world!';
    }
}

Flight::route('/', array('Greeting','hello'));
Or an object method:
class Greeting
{
    public function __construct() {
        $this->name = 'John Doe';
    }

    public function hello() {
        echo "Hello, {$this->name}!";
    }
}

$greeting = new Greeting();

Flight::route('/', array($greeting, 'hello'));
----------------------------------------------------
Extending
Flight is designed to be an extensible framework. The framework comes with a set of default methods and components, but it allows you to map your own methods, register your own classes, or even override existing classes and methods.

Registering Classes
To register your own class, you use the register function:

// Register your class
Flight::register('user', 'User');

// Get an instance of your class
$user = Flight::user();

-------------------------------------------------------
Overriding
Flight allows you to override its default functionality to suit your own needs, without having to modify any code.

For example, when Flight cannot match a URL to a route, it invokes the notFound method which sends a generic HTTP 404 response. You can override this behavior by using the map method:

Flight::map('notFound', function(){
    // Display custom 404 page
    include 'errors/404.html';
});

------------------------------------------------------
Variables
Flight allows you to save variables so that they can be used anywhere in your application.

// Save your variable
Flight::set('id', 123);

// Elsewhere in your application
$id = Flight::get('id');

------------------------------------------------------
Error Handling
Errors and Exceptions
All errors and exceptions are caught by Flight and passed to the error method. The default behavior is to send a generic HTTP 500 Internal Server Error response with some error information.

You can override this behavior for your own needs:

Flight::map('error', function(Exception $ex){
    // Handle error
    echo $ex->getTraceAsString();
});

By default errors are not logged to the web server. You can enable this by changing the config:

Flight::set('flight.log_errors', true);
------------------------------------------------------
Requests
Flight encapsulates the HTTP request into a single object, which can be accessed by doing:

$request = Flight::request();

The request object provides the following properties:

url - The URL being requested
base - The parent subdirectory of the URL
method - The request method (GET, POST, PUT, DELETE)
referrer - The referrer URL
ip - IP address of the client
ajax - Whether the request is an AJAX request
scheme - The server protocol (http, https)
user_agent - Browser information
type - The content type
length - The content length
query - Query string parameters
data - Post data or JSON data
cookies - Cookie data
files - Uploaded files
secure - Whether the connection is secure
accept - HTTP accept parameters
proxy_ip - Proxy IP address of the client

You can access the query, data, cookies, and files properties as arrays or objects.

So, to get a query string parameter, you can do:

$id = Flight::request()->query['id'];

------------------------------------------------------
JSON

Flight provides support for sending JSON and JSONP responses. To send a JSON response you pass some data to be JSON encoded:

Flight::json(array('id' => 123));

For JSONP requests you, can optionally pass in the query parameter name you are using to define your callback function:

Flight::jsonp(array('id' => 123), 'q');

--------------------------------------------------------
Configuration
You can customize certain behaviors of Flight by setting configuration values through the set method.

Flight::set('flight.log_errors', true);

The following is a list of all the available configuration settings:

flight.base_url - Override the base url of the request. (default: null)
flight.case_sensitive - Case sensitive matching for URLs. (default: false)
flight.handle_errors - Allow Flight to handle all errors internally. (default: true)
flight.log_errors - Log errors to the web server's error log file. (default: false)
flight.views.path - Directory containing view template files. (default: ./views)
flight.views.extension - View template file extension. (default: .php)



URL flightphp:http://flightphp.com/learn/







